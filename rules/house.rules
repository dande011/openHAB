import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

var Timer timer = null
val Integer hotTubRunMinutes = 45

/*
rule "Timer Demo"
when
	Item Light_GF_Corridor_Ceiling received command
then
	if(receivedCommand==ON) {
		if(timer==null) {
			// first ON command, so create a timer to turn the light off again
			timer = createTimer(now.plusSeconds(10)) [|
				sendCommand(Light_GF_Corridor_Ceiling, OFF)
			]
		} else {
			// subsequent ON command, so reschedule the existing timer
			timer.reschedule(now.plusSeconds(10))
		}
	} else if(receivedCommand==OFF) {
		// remove any previously scheduled timer
		if(timer!=null) {
			timer.cancel
			timer = null
		}	
	}
end
*/

rule "Hot Tub Timer"
when
	Item HotTubPumpHigh received command
then
	if(receivedCommand==ON){
		if(timer==null) {
			timer = createTimer(now.plusMinutes( hotTubRunMinutes )) [|
				sendCommand(HotTubPumpHigh, OFF)
				sendCommand(HotTubHeater, OFF)
			]
		} else {
			timer.reschedule(now.plusMinutes( hotTubRunMinutes ))
		}
	} else if(receivedCommand==OFF) {
		if(timer!=null) {
			timer.cancel
			timer = null
		}
	}
end

	
rule "Run Hot Tub Daily"
when
	Time is midnight
then
	sendCommand(HotTubPumpLow, ON)
	timer = createTimer(now.plusHours(1)) [|
		sendCommand(HotTubPumpLow, OFF)
	]
end
